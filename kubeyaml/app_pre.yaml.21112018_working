apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc-a
spec:
  type: LoadBalancer
  ports:
  - name: mongodb
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb-node1
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc-b
spec:
  type: LoadBalancer
  ports:
  - name: mongodb
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb-node2
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc-c
spec:
  type: LoadBalancer
  ports:
  - name: mongodb
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb-node3
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo-rc1 
  labels:
    app: mongodb-node1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-node1
    matchExpressions:
      - {key: app, operator: In, values: [mongodb-node1]}
  template:
    metadata:
      labels:
        app: mongodb-node1
    spec:
      containers:
        - name: db1
          image: registry.au-syd.bluemix.net/kumarsp/mongo:1.5
          args: ["--replSet","my_set","--sslMode","requireSSL","--sslPEMKeyFile","/keys/mongodb.pem","--sslCAFile","/keys/caroot.cer","--bind_ip_all"]
          ports:
            - containerPort: 27017
          volumeMounts:
          - name: mongo-storage1
            mountPath: /data/db
      volumes:
      - name: mongo-storage1
        emptyDir: {}
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo-rc2
  labels:
    app: mongodb-node2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-node2
    matchExpressions:
      - {key: app, operator: In, values: [mongodb-node2]}
  template:
    metadata:
      labels:
        app: mongodb-node2
    spec:
      containers:
        - name: db2
          image: registry.au-syd.bluemix.net/kumarsp/mongo:1.5
          args: ["--replSet","my_set","--sslMode","requireSSL","--sslPEMKeyFile","/keys/mongodb.pem","--sslCAFile","/keys/caroot.cer","--bind_ip_all"]
          ports:
            - containerPort: 27017
          volumeMounts:
          - name: mongo-storage2
            mountPath: /data/db
      volumes:
      - name: mongo-storage2
        emptyDir: {}
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo-rc3
  labels:
    app: mongodb-node3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-node3
    matchExpressions:
      - {key: app, operator: In, values: [mongodb-node3]}
  template:
    metadata:
      labels:
        app: mongodb-node3
    spec:
      containers:
        - name: db2
          image: registry.au-syd.bluemix.net/kumarsp/mongo:1.5
          args: ["--replSet","my_set","--sslMode","requireSSL","--sslPEMKeyFile","/keys/mongodb.pem","--sslCAFile","/keys/caroot.cer","--bind_ip_all"]
          ports:
            - containerPort: 27017
          volumeMounts:
          - name: mongo-storage3
            mountPath: /data/db
      volumes:
      - name: mongo-storage3
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-server
spec:
  type: NodePort 
  ports:
  - name: node 
    port: 8081 
    protocol: TCP
    targetPort: 8081 
  selector:
    app: nodejs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs
  labels:
    app: nodejs
spec:
  replicas: 3
  selector:
    matchLabels:
      tier: backend
    matchExpressions:
     - {key: tier, operator: In, values: [backend]}
  template:
    metadata:
      labels:
        app: nodejs
        tier: backend
    spec:
      containers:
        - name: nodejs
          image: registry.au-syd.bluemix.net/kumarsp/node:1.6
          env:
            - name: DBSERVER
              value: "mongodb-server"
            - name: KEYS
              value: "/keys"
          workingDir: /usr/app
          command: ["npm"]
          args: ["start"]
          ports:
          - containerPort: 8081

